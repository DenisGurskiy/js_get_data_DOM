{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCMA,I,EAAM,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EADiB,SAAS,gBAAgB,CAAC,qB,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,IAG3C,EAAQ,EAAgB,MAAM,CAAC,SAAC,CAAA,CAAK,CAA3C,EACE,OAAO,EAAM,OAAO,EAAK,SAAS,CAAC,OAAO,CAAC,KAAM,IACnD,EAAG,GAEG,EAAU,EAAQ,EAAgB,MAAM,CAExC,EAAS,SAAC,CAAA,CAAQ,CAAA,CAAS,CAAjC,EAIE,IAHA,IAAI,EAAS,GACT,EAAkB,EAEf,EAAkB,EAAU,GACjC,EAAU,EAAkB,EAAW,EACvC,CAAA,EAAkB,KAAK,KAAK,CAAC,EAAkB,EAA/C,EAEsB,GACpB,CAAA,EAAS,EAAY,CADvB,EAKF,OAAO,CACT,EAEM,EAAc,EAAO,EA5BT,IACE,KA4Bd,EAAgB,EAAO,EA7BX,IACE,IA8BpB,CAAA,SAAS,aAAa,CAAC,yBAAyB,SAAS,CAAG,EAC5D,SAAS,aAAa,CAAC,2BAA2B,SAAS,CAAG","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar myDivider = 1000;\nvar mySeparator = \",\";\nvar spanCollection = document.querySelectorAll(\"span.population\");\nvar arrayPopulation = _to_consumable_array(spanCollection);\nvar total = arrayPopulation.reduce(function(sum, elem) {\n    return sum + Number(elem.innerHTML.replace(/,/g, \"\"));\n}, 0);\nvar average = total / arrayPopulation.length;\nvar divide = function(number, divider, separator) {\n    var string = \"\";\n    var numberForChange = number;\n    while(numberForChange / divider > 0){\n        string = numberForChange % divider + string;\n        numberForChange = Math.trunc(numberForChange / divider);\n        if (numberForChange > 0) string = separator + string;\n    }\n    return string;\n};\nvar totalResult = divide(total, myDivider, mySeparator);\nvar averageResult = divide(average, myDivider, mySeparator);\ndocument.querySelector(\"span.total-population\").innerHTML = totalResult;\ndocument.querySelector(\"span.average-population\").innerHTML = averageResult;\n\n//# sourceMappingURL=index.37934cbe.js.map\n","'use strict';\n\nconst myDivider = 1000;\nconst mySeparator = ',';\n\nconst spanCollection = document.querySelectorAll('span.population');\nconst arrayPopulation = [...spanCollection];\n\nconst total = arrayPopulation.reduce((sum, elem) => {\n  return sum + Number(elem.innerHTML.replace(/,/g, ''));\n}, 0);\n\nconst average = total / arrayPopulation.length;\n\nconst divide = (number, divider, separator) => {\n  let string = '';\n  let numberForChange = number;\n\n  while (numberForChange / divider > 0) {\n    string = (numberForChange % divider) + string;\n    numberForChange = Math.trunc(numberForChange / divider);\n\n    if (numberForChange > 0) {\n      string = separator + string;\n    }\n  }\n\n  return string;\n};\n\nconst totalResult = divide(total, myDivider, mySeparator);\nconst averageResult = divide(average, myDivider, mySeparator);\n\ndocument.querySelector('span.total-population').innerHTML = totalResult;\ndocument.querySelector('span.average-population').innerHTML = averageResult;\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","arrayPopulation","_array_without_holes","isArray","document","querySelectorAll","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","total","reduce","sum","elem","Number","innerHTML","replace","average","divide","number","divider","separator","string","numberForChange","Math","trunc","totalResult","averageResult","querySelector"],"version":3,"file":"index.37934cbe.js.map"}